-------------------------------------            Chatbot using HTML, CSS, JS  and GEMINI API          ---------------------------------

==> Today i have created a mini Chatbot using HTML


Today, I created a mini AI chatbot using HTML, CSS, and JavaScript with the Google Gemini API. My goal was to understand:

How chatbots work

How APIs fetch responses

How to structure a web app

How to make it interactive and visually appealing

This chatbot is designed for business-related queries, but I plan to enhance it with more features in the future.







Step-by-Step Development Process
1. Setting Up the Basic Structure (HTML)
First, I created the basic layout using HTML:

A chat window (hidden by default)

A chat button (floating button to open the chat)

An input area (text box + send button)

A message display area (where user & bot messages appear)

Key Elements Used:

<div> for structuring sections

<input> for user messages

<button> for actions (send, close)

<section> for the chat container

2. Styling the Chatbot (CSS)
To make it look modern and attractive, I added CSS:

Gradient background for buttons

Smooth animations (message pop-up effect)

Bubble floating effect (background animation)

Responsive design (works on different screen sizes)

Key CSS Features Used:

@keyframes for animations (bubbles, message effects)

flexbox for proper alignment

box-shadow for depth

z-index to manage layers (bubbles behind chat)







3. Adding Functionality (JavaScript)
The main logic was written in JavaScript:

a. Connecting to Gemini API
Got an API key from Google AI Studio

Used GoogleGenerativeAI to initialize the model (gemini-1.5-flash)

Set a system instruction (to guide the bot’s behavior)

b. Handling User Input
Used querySelector to get the input field and button

Added eventListener for the send button

When the user types a message:

It appears in the chat

A loading animation shows while waiting for the API response

The bot’s reply is displayed

c. Managing Chat History
Stored messages in an array (messages.history)

Used async/await to handle API calls smoothly

Streamed responses for a real-time typing effect

4. Debugging & Fixes
While building, I faced several bugs:

API not responding → Fixed by checking the correct API key and model name

Messages not displaying → Used innerHTML properly to update the chat

Bubbles not animating → Adjusted z-index and animation timing

AI (ChatGPT/Gemini) helped me debug by suggesting fixes for these issues.

Future Improvements





To make this chatbot even better, I plan to add:
✅ Voice Assistant (Speech-to-Text & Text-to-Speech)
✅ Emoji Picker (For more expressive chats)
✅ Spelling Corrector (Auto-fix typos in user messages)
✅ Multi-language Support (Allow responses in different languages)



Key Learnings
✔ How APIs work – Sending requests & handling responses
✔ DOM Manipulation – Using querySelector, innerHTML, addEventListener
✔ Async Programming – async/await for API calls
✔ CSS Animations – Making UI more engaging
✔ Debugging Skills – Fixing issues with AI assistance